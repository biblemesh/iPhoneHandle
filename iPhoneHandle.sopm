<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.0">
    <Name>iPhoneHandle</Name>
    <Version>0.0.0</Version>
    <Framework>3.3.x</Framework>
    <Vendor>OTRS AG</Vendor>
    <URL>http://otrs.org/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <Description Lang="en">The iPhoneHandle Package.</Description>
    <Description Lang="de">Das iPhoneHandle Paket.</Description>
    <Filelist>
        <File Permission="755" Location="bin/cgi-bin/json.pl"/>
        <File Permission="644" Location="Kernel/Config/Files/iPhone_Deprecated.xml"/>
        <File Permission="644" Location="Kernel/Config/Files/iPhone.xml"/>
        <File Permission="644" Location="Kernel/System/DynamicField/iPhone/Backend/Checkbox.pm"/>
        <File Permission="644" Location="Kernel/System/DynamicField/iPhone/Backend/Date.pm"/>
        <File Permission="644" Location="Kernel/System/DynamicField/iPhone/Backend/DateTime.pm"/>
        <File Permission="644" Location="Kernel/System/DynamicField/iPhone/Backend/Dropdown.pm"/>
        <File Permission="644" Location="Kernel/System/DynamicField/iPhone/Backend/Multiselect.pm"/>
        <File Permission="644" Location="Kernel/System/DynamicField/iPhone/Backend/Text.pm"/>
        <File Permission="644" Location="Kernel/System/DynamicField/iPhone/Backend/TextArea.pm"/>
        <File Permission="644" Location="Kernel/System/DynamicField/iPhone/iPhoneBackend.pm"/>
        <File Permission="644" Location="scripts/test/iPhoneHandle/JSONGateway.t"/>
        <File Permission="644" Location="var/packagesetup/iPhoneHandle.pm"/>
        <File Permission="644" Location="Kernel/System/iPhone.pm"/>
        <!-- the following file is created by the package installer
        <File Permission="644" Location="var/RELEASE.iPhoneHandle"/>
        -->
    </Filelist>
    <CodeInstall Type="post">

        # define function name
        my $FunctionName = 'CodeInstall';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        # load the module
        if ( $Self->{MainObject}->Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule->new( %{$Self} );

            if ($CodeObject) {

                # start method
                if ( !$CodeObject->$FunctionName(%{$Self}) ) {
                    $Self->{LogObject}->Log(
                        Priority => 'error',
                        Message  => "Could not call method $FunctionName() on $CodeModule.pm."
                    );
                }
            }

            # error handling
            else {
                $Self->{LogObject}->Log(
                    Priority => 'error',
                    Message  => "Could not call method new() on $CodeModule.pm."
                );
            }
        }

    </CodeInstall>
    <CodeUpgrade Type="post">

        # define function name
        my $FunctionName = 'CodeUpgrade';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        # load the module
        if ( $Self->{MainObject}->Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule->new( %{$Self} );

            if ($CodeObject) {

                # start method
                if ( !$CodeObject->$FunctionName(%{$Self}) ) {
                    $Self->{LogObject}->Log(
                        Priority => 'error',
                        Message  => "Could not call method $FunctionName() on $CodeModule.pm."
                    );
                }
            }

            # error handling
            else {
                $Self->{LogObject}->Log(
                    Priority => 'error',
                    Message  => "Could not call method new() on $CodeModule.pm."
                );
            }
        }

    </CodeUpgrade>
    <CodeReinstall Type="post">

        # define function name
        my $FunctionName = 'CodeReinstall';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        # load the module
        if ( $Self->{MainObject}->Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule->new( %{$Self} );

            if ($CodeObject) {

                # start method
                if ( !$CodeObject->$FunctionName(%{$Self}) ) {
                    $Self->{LogObject}->Log(
                        Priority => 'error',
                        Message  => "Could not call method $FunctionName() on $CodeModule.pm."
                    );
                }
            }

            # error handling
            else {
                $Self->{LogObject}->Log(
                    Priority => 'error',
                    Message  => "Could not call method new() on $CodeModule.pm."
                );
            }
        }

    </CodeReinstall>
    <CodeUninstall Type="pre">

        # define function name
        my $FunctionName = 'CodeUninstall';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        # load the module
        if ( $Self->{MainObject}->Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule->new( %{$Self} );

            if ($CodeObject) {

                # start method
                if ( !$CodeObject->$FunctionName(%{$Self}) ) {
                    $Self->{LogObject}->Log(
                        Priority => 'error',
                        Message  => "Could not call method $FunctionName() on $CodeModule.pm."
                    );
                }
            }

            # error handling
            else {
                $Self->{LogObject}->Log(
                    Priority => 'error',
                    Message  => "Could not call method new() on $CodeModule.pm."
                );
            }
        }

    </CodeUninstall>

    <IntroInstall Type="pre" Title="Install Information" Lang="en"><![CDATA[
        <br/>
        <strong>WELCOME</strong>
        <br/>
        <br/>
        You are about to install the OTRS package iPhoneHandle.<br/>
        <br/>
        <br/>
        <b>ATTENTION</b>
        <br/>
        <br/>
        Make sure your database accepts packages over 5 MB in size. A MySQL database for example accepts packages up to 1 MB by default. In this case, the value for max_allowed_packet must be increased. The recommended maximum size accepted is 20 MB.<br/>
        <br/>
        <br/>
        ((enjoy))<br/>
        <br/>
    ]]></IntroInstall>
    <IntroUpgrade Type="pre" Title="Upgrade Information" Lang="en"><![CDATA[
        <br/>
        <strong>WELCOME</strong>
        <br/>
        <br/>
        You are about to upgrade the OTRS package iPhoneHandle.<br/>
        <br/>
        <br/>
        ((enjoy))<br/>
        <br/>
    ]]></IntroUpgrade>
    <IntroUninstall Type="pre" Title="Uninstallation Information" Lang="en"><![CDATA[
        <br/>
        <strong>ATTENTION</strong>
        <br/>
        <br/>
        If you uninstall this package, the iPhone app, will not be able to communicate with your server!
        <br/>
        <br/>
        ((enjoy))<br/>
        <br/>
    ]]></IntroUninstall>

</otrs_package>
